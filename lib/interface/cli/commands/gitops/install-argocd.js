const cp = require('child_process');
const rp = require('request-promise');
const promiseRetry = require('promise-retry');

const getExternalIp = namespace => async (retry) => {
    process.stdout.write('.');
    const ip = cp.execSync(
        `kubectl get svc argocd-server -n ${namespace} -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'`,
        { encoding: 'utf-8' },
    );
    if (ip) {
        return ip;
    }

    return retry(new Error('Can\'t get argocd external-ip address'));
};

async function install({ installManifest, kubeNamespace, loadBalancer, setArgoPassword }) {
    // sanitizing
    const namespace = kubeNamespace.replace('"', '');
    const manifest = installManifest.replace('"', '');
    const password = setArgoPassword.replace('"', '');

    try {
        console.log(`Creating namespace ${namespace}...`);
        cp.execSync(`kubectl create ns "${namespace}"`);
        console.log(`\u2705 Created namespace ${namespace}`);
    } catch (err) {
        if (!err.message.match(/AlreadyExists/)) {
            process.exit(err.status);
        }
    }

    try {
        console.log('Creating argocd resources...');
        cp.execSync(`kubectl apply -n "${namespace}" -f "${manifest}"`, { stdio: 'inherit' });
        console.log('\u2705 Created argocd resources');
    } catch (err) {
        process.exit(err.status);
    }

    let host;
    if (loadBalancer) {
        try {
            console.log('Changing service type to "LoadBalancer"...');
            cp.execSync(
                `kubectl patch svc argocd-server -n "${namespace}" -p '{"spec": {"type": "LoadBalancer"}}'`,
                { stdio: 'inherit' },
            );
            console.log('\u2705 Changed service type to "LoadBalancer"');

            process.stdout.write('Getting argocd ip address...');
            host = `https://${await promiseRetry(getExternalIp(namespace), { retries: 100, factor: 1, minTimeout: 5000 })}`;
            console.log(`\n\u2705 Argocd ip address is ${host}`);
        } catch (err) {
            console.error(err.message);
            process.exit(err.status);
        }
    }

    // get autogenerated password
    let autogenerated;
    try {
        console.log('Getting autogenerated password...');
        autogenerated = cp.execSync(
            `kubectl get pods -n "${namespace}" -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2 | xargs echo -n`,
            { encoding: 'utf-8' },
        );
        console.log('\u2705 Got autogenerated password');
    } catch (err) {
        console.error(err.message);
        process.exit(err.status);
    }

    // update password
    try {
        console.log('Getting argocd token...');
        const argocdToken = await rp({
            method: 'POST',
            uri: `${host}/api/v1/session`,
            body: {
                username: 'admin',
                password: autogenerated,
            },
            json: true,
        });
        console.log('\u2705 Got argocd token');

        console.log('Updating admin password...');
        await rp({
            method: 'PUT',
            uri: `${host}/api/v1/account/password`,
            headers: {
                Authorization: `Bearer ${argocdToken.token}`,
            },
            body: {
                currentPassword: autogenerated,
                name: 'admin',
                newPassword: password,
            },
            json: true,
        });
        console.log('\u2705 Updated admin password');
    } catch (err) {
        console.error(err.message);
        process.exit(err.status);
    }

    return {
        host,
    };
}

module.exports = {
    install,
};
